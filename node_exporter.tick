// node_exporter.tick normalizes the scraped data from the node_exporter

// db is the destination db for the normalized data
var db = 'prometheus'

// rp is the destination rp for the normalized data
var rp = 'autogen'

// Normalize node_cpu
stream
    |from()
        .where(lambda: "__name__" == 'node_cpu')
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
        .nonNegative()
    |groupBy(*)
        .exclude('mode')
        .exclude('__name__')
    |flatten()
        .on('mode')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_cpu')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_disk_bytes
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_disk_bytes_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_disk_bytes_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_disk_bytes')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_disk_io
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_disk_io_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_disk_io_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_disk_io')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_disk_read
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_disk_read_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_disk_read_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_disk_read')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_disk_reads
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_disk_reads_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_disk_reads_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_disk_reads')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_disk_sectors
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_disk_sectors_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_disk_sectors_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_disk_sectors')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_disk_write
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_disk_write_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_disk_write_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_disk_write')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_disk_writes
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_disk_writes_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_disk_writes_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_disk_writes')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_entropy
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_entropy_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_entropy_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_entropy')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_exporter
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_exporter_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_exporter_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_exporter')
        .create()
        .database(db)
        .retentionPolicy(rp)

// Normalize node_filefd
stream
    |from()
        .where(lambda: strHasPrefix("__name__", 'node_filefd_'))
        .groupBy(*)
    |derivative('value')
        .unit(1s)
        .as('value')
    |eval(lambda: strTrimPrefix("__name__", 'node_filefd_'))
        .as('__name__')
        .tags('__name__')
        .keep('value')
    |groupBy(*)
        .exclude('__name__')
    |flatten()
        .on('__name__')
        .dropOriginalFieldName()
    |influxDBOut()
        .measurement('node_filefd')
        .create()
        .database(db)
        .retentionPolicy(rp)
